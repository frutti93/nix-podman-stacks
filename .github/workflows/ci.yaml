name: "Build"
on:
  workflow_dispatch:
  pull_request:
    paths:
      - "**.nix"
      - "flake.lock"
      - ".github/workflows/ci.yaml"
      - "images/**"
      - "**.md"

jobs:
  detect-changed-images:
    name: Detect changed container images
    runs-on: ubuntu-24.04
    outputs:
      images: ${{ steps.diff-images.outputs.images }}
      has_changes: ${{ steps.diff-images.outputs.has_changes }}
    steps:
      - name: Checkout PR
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Extract and compare images
        id: diff-images
        run: |
          set -euo pipefail

          extract_images() {
            local ref=$1
            git show "$ref" --name-only --format="" | grep '\.nix$' | while read -r file; do
              git show "$ref:$file" 2>/dev/null | grep -oP 'image\s*=\s*"\K[^"]+(?=")' 2>/dev/null || true
            done | sort -u
          }

          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            BASE_SHA="${{ github.event.pull_request.base.sha }}"
            HEAD_SHA="${{ github.event.pull_request.head.sha }}"
          elif [[ "${{ github.event_name }}" == "push" ]]; then
            BASE_SHA="${{ github.event.before }}"
            HEAD_SHA="${{ github.sha }}"
          else
            BASE_SHA="$(git rev-parse HEAD^)"
            HEAD_SHA="$(git rev-parse HEAD)"
          fi

          echo "Comparing images between $BASE_SHA and $HEAD_SHA"

          BASE_IMAGES=$(extract_images "$BASE_SHA" || true)
          HEAD_IMAGES=$(extract_images "$HEAD_SHA" || true)

          CHANGED_IMAGES=$(comm -13 <(echo "$BASE_IMAGES") <(echo "$HEAD_IMAGES") | grep -v '^$' || true)

          while IFS= read -r base_img; do
            base_repo="${base_img%:*}"
            base_tag="${base_img##*:}"
            while IFS= read -r head_img; do
              head_repo="${head_img%:*}"
              head_tag="${head_img##*:}"
              if [[ "$base_repo" == "$head_repo" ]] && [[ "$base_tag" != "$head_tag" ]]; then
                CHANGED_IMAGES=$(echo -e "$CHANGED_IMAGES\n$head_img")
              fi
            done <<< "$HEAD_IMAGES"
          done <<< "$BASE_IMAGES"

          CHANGED_IMAGES=$(echo "$CHANGED_IMAGES" | grep -v '^$' | sort -u || true)

          images_json="[]"
          has_changes="false"

          if [ -n "$CHANGED_IMAGES" ]; then
            has_changes="true"
            while IFS= read -r image; do
              images_json=$(echo "$images_json" | jq -c --arg img "$image" '. + [$img]')
            done <<< "$CHANGED_IMAGES"
          fi

          echo "Changed images found:"
          echo "$CHANGED_IMAGES"
          echo ""
          echo "JSON output: $images_json"

          echo "images=$images_json" >> $GITHUB_OUTPUT
          echo "has_changes=$has_changes" >> $GITHUB_OUTPUT

  trivy-scan:
    name: Trivy Security Scan
    runs-on: ubuntu-24.04
    needs: detect-changed-images
    permissions:
      security-events: write
      pull-requests: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Install Trivy
        uses: aquasecurity/setup-trivy@v0.2.3

      - name: Scan changed images
        run: |
          IMAGES='${{ needs.detect-changed-images.outputs.images }}'
          if [ "$(echo "$IMAGES" | jq 'length')" -eq 0 ]; then
            echo "‚úÖ No images changed, skipping scan"
            exit 0
          fi

          mkdir -p trivy-results
          FAIL=0

          for IMG in $(echo "$IMAGES" | jq -r '.[]'); do
            SAFE_NAME=$(echo "$IMG" | tr '/:' '_' | tr -d '.')
            OUTPUT="trivy-results/trivy-$SAFE_NAME.txt"
            echo "üîç Scanning $IMG"
            trivy image --exit-code 1 --severity CRITICAL,HIGH --format table "$IMG" | tee "$OUTPUT"
            if [ "${PIPESTATUS[0]}" -ne 0 ]; then
              FAIL=1
            fi
          done

          echo "Trivy scan completed"
          exit $FAIL

      - name: Upload scan results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: trivy-results
          path: trivy-results
          retention-days: 1

  trivy-pr-comment:
    name: Update PR comment
    runs-on: ubuntu-24.04
    needs: [detect-changed-images, trivy-scan]
    if: always() && github.event_name == 'pull_request' && needs.detect-changed-images.outputs.has_changes == 'true'
    permissions:
      pull-requests: write
    steps:
      - name: Download scan results
        uses: actions/download-artifact@v5
        with:
          name: trivy-results
          path: results

      - name: Build PR comment
        run: |
          BODY="## üîí Container Image Security Scan"
          BODY="$BODY\n\nScanned the following updated images:\n"

          for f in results/*.txt; do
            IMG=$(basename "$f" | sed 's/^trivy-//; s/\.txt//; s/_/:/g')
            if [ -s "$f" ]; then
              BODY="$BODY\n\n### \`$IMG\`\n<details><summary>Details</summary>\n\n\`\`\`\n$(cat "$f")\n\`\`\`\n</details>"
            else
              BODY="$BODY\n\n### \`$IMG\`\n‚úÖ No vulnerabilities were detected."
            fi
          done
          echo -e "$BODY" > comment.md

      - name: Comment PR with Trivy results
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          path: comment.md

  build-config:
    name: Build
    runs-on: ubuntu-24.04
    steps:
      - name: Free diskspace
        uses: easimon/maximize-build-space@master
        with:
          build-mount-path: /nix
          root-reserve-mb: 5120
          remove-dotnet: true
          remove-android: true
          remove-haskell: true
      - uses: actions/checkout@v5
      - name: Install Nix
        uses: cachix/install-nix-action@v31
        with:
          extra_nix_config: "experimental-features = nix-command flakes pipe-operators"
      - name: Restore and cache Nix store
        uses: nix-community/cache-nix-action@v6
        with:
          primary-key: nix-${{ runner.os }}-${{ hashFiles('**/*.nix', '**/flake.lock') }}
          restore-prefixes-first-match: nix-${{ runner.os }}-
          gc-max-store-size-linux: 1073741824
          purge: false
      - name: Build Template Config
        run: nix build ./template#homeConfigurations.myhost.activationPackage
      - name: Build Full Config
        run: nix build .#homeConfigurations.ci.activationPackage

  check_flake:
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout
        uses: actions/checkout@v5
      - name: Install Nix
        uses: cachix/install-nix-action@v31
        with:
          extra_nix_config: "experimental-features = nix-command flakes pipe-operators"
      - name: Check Flake
        run: nix flake check --keep-going

  build-docs:
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout
        uses: actions/checkout@v5
      - name: Install Nix
        uses: cachix/install-nix-action@v31
        with:
          extra_nix_config: "experimental-features = nix-command flakes pipe-operators"
      - name: Build docs
        run: nix build .#book -o result/book
      - name: Build search
        run: nix build .#search -o result/search
      - name: Upload docs
        uses: actions/upload-pages-artifact@v4
        with:
          path: ./result

  publish-docs:
    needs: build-docs
    runs-on: ubuntu-24.04
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      pages: write
      id-token: write
    steps:
      - uses: actions/deploy-pages@v4
