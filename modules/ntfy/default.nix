{
  config,
  lib,
  options,
  pkgs,
  ...
}: let
  name = "ntfy";
  storage = "${config.nps.storageBaseDir}/${name}";
  cfg = config.nps.stacks.${name};

  yaml = pkgs.formats.yaml {};
in {
  imports = import ../mkAliases.nix config lib name [name];

  options.nps.stacks.${name} = {
    enable = lib.mkEnableOption name;
    enableGrafanaDashboard = lib.mkEnableOption "Grafana Dashboard";
    enablePrometheusExport = lib.mkEnableOption "Prometheus Export";
    extraEnv = lib.mkOption {
      type = (import ../types.nix lib).extraEnv;
      description = ''
        Extra environment variables to set for the container.
        Variables can be either set directly or sourced from a file (e.g. for secrets).

        For example in order to enable web push support, make sure you pass the 'NTFY_WEB_PUSH_PUBLIC_KEY',
        'NTFY_WEB_PUSH_PRIVATE_KEY' & 'NTFY_WEB_PUSH_EMAIL_ADDRESS' variables.
        Keys can be generated by running `podman run --rm docker.io/binwiederhier/ntfy:latest webpush keys`
      '';
    };
    settings = lib.mkOption {
      type = yaml.type;
      default = {};
      apply = yaml.generate "server.yml";

      description = ''
        Server configuration (alternative to environment variable based configuration).
        Will be mounted as `/etc/ntfy/server.yml` in the container.

        The final configuration file will be templated with `gomplate`, so secrets can be read from files or environment variables.

        See
        - <https://docs.ntfy.sh/config/#config-options>
        - <https://docs.ntfy.sh/config/#configuring-the-ntfy-server>
        - <https://github.com/binwiederhier/ntfy/blob/main/server/server.yml>
      '';
      example = {
        enable-login = true;
        auth-default-access = "deny-all";
        web-push-private-key = "{{ file.Read `/run/secrets/web_push_private_key` }}";
      };
    };
  };

  config = lib.mkIf cfg.enable {
    nps.stacks.monitoring = {
      grafana.dashboards = lib.optional cfg.enableGrafanaDashboard ./grafana_dashboard.json;
      prometheus.config.scrape_configs = lib.optional cfg.enablePrometheusExport {
        job_name = "ntfy";
        honor_timestamps = true;
        metrics_path = "/metrics";
        scheme = "http";
        static_configs = [{targets = [(name + ":80")];}];
      };
    };

    services.podman.containers.${name} = {
      image = "docker.io/binwiederhier/ntfy:v2.14.0";
      exec = "serve";
      volumes = [
        "${storage}:/var/lib/ntfy"
      ];

      templateMount = lib.optional (cfg.settings != {}) {
        templatePath = cfg.settings;
        destPath = "/etc/ntfy/server.yml";
      };

      environment = {
        NTFY_BASE_URL = cfg.containers.${name}.traefik.serviceUrl;
        NTFY_CACHE_FILE = "/var/lib/ntfy/cache.db";
        NTFY_AUTH_FILE = "/var/lib/ntfy/auth.db";
        NTFY_AUTH_DEFAULT_ACCESS = "deny-all";
        NTFY_BEHIND_PROXY = true;
        NTFY_ATTACHMENT_CACHE_DIR = "/var/lib/ntfy/attachments";
        NTFY_ENABLE_LOGIN = true;
        NTFY_UPSTREAM_BASE_URL = "https://ntfy.sh";
        NTFY_WEB_PUSH_FILE = "/var/lib/ntfy/webpush.db";
        NTFY_ENABLE_METRICS = cfg.enablePrometheusExport;
      };

      extraEnv = cfg.extraEnv;

      port = 80;
      traefik.name = name;
      homepage = {
        category = "General";
        name = "ntfy";
        settings = {
          description = "Push Notifications";
          icon = "ntfy";
        };
      };
    };
  };
}
